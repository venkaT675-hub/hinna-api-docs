openapi: 3.0.3
info:
  title: HINNA Payment System - Integration API
  version: 1.0.0
  description: >
    Integration endpoints for the HINNA Payment System used by the User Service.
    This spec intentionally omits operationId, callbacks, deprecations, externalDocs,
    and vendor x-extensions, per documentation guidance. Per-response headers like
    idempotency or rate-limit are not enumerated; common error shape and status codes
    are provided.

servers:
  - url: http://payment-service-dev.hinna.local/api/v1/integration
    description: Development
  - url: http://payment-service-staging.hinna.app/api/v1/integration
    description: Staging
  - url: https://payment-service.hinna.app/api/v1/integration
    description: Production

tags:
  - name: Auth
    description: Service-to-service authentication
  - name: Account
    description: Account verification and linking
  - name: User
    description: User-focused queries (payments, methods, balance)
  - name: System
    description: Health and meta operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      name: userId
      in: path
      required: true
      description: User ID from the User Service
      schema:
        type: integer
        format: int64
        minimum: 1
    Page:
      name: page
      in: query
      required: false
      description: Zero-based page index
      schema:
        type: integer
        minimum: 0
        default: 0
    Size:
      name: size
      in: query
      required: false
      description: Page size
      schema:
        type: integer
        minimum: 1
        default: 20

  schemas:
    Error:
      type: object
      properties:
        status: { type: integer, example: 400 }
        message: { type: string, example: "Bad Request" }
        details: { type: string, nullable: true, example: "Detailed error description" }
        timestamp: { type: string, format: date-time, example: "2025-04-24T14:32:25.123" }
      required: [status, message, timestamp]

    # ... (ServiceTokenRequest, ServiceTokenResponse, VerifyAccountResponse, LinkAccountRequest, LinkAccountResponse, PaymentSummary, PaymentHistoryResponse, PaymentMethod, PaymentMethodsResponse, BalanceResponse, HealthResponse)

security:
  - bearerAuth: []

paths:
  /api/v1/auth/service-token:
    post:
      tags: [Auth]
      summary: Obtain a service token (JWT)
      description: >
        Returns a JWT for service-to-service authentication. The token is typically valid for 24 hours.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ServiceTokenRequest' }
      responses:
        "200":
          description: Token issued
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ServiceTokenResponse' }
        "400": { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "401": { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "500": { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /account/verify/{userId}:
    get:
      tags: [Account]
      summary: Verify whether a user has an account
      description: Checks if an account exists for the given user and whether it is active; returns the account type when applicable.
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        "200":
          description: Verification result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VerifyAccountResponse' }
        "401": { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "404": { description: Not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        "500": { description: Server error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  # ... (other endpoints: /account/link, /user/{userId}/payments, /user/{userId}/payment-methods, /user/{userId}/balance, /health)
